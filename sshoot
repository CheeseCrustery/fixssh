#!/usr/bin/fish

# check args
function is_user
	cat /etc/passwd | string match --quiet --regex "^$_flag_value:"
end
if not argparse --max-args 1 'u/user=!is_user' 'a/ascii-only' -- $argv
	echo 'Usage: sshoot [--user username] [--ascii-only]'
	exit 2
end
if not string length -q $_flag_user
	# if user is not given, just take the current user
	set _flag_user $USERNAME
end

# get paths to config documents
set keys_path (cat /etc/passwd | string match --regex --entire "^$_flag_user:" | cut --delimiter ':' --fields 6)
set config_path '/etc/ssh/sshd_config'

# get symbols
if set --query $_flag_ascii_only
	set sym_ok 'OK'
	set sym_bad 'FAIL'
else
	set sym_ok '✅'
	set sym_bad '❌'
end

# show a checkmark
function check
	echo " $sym_ok"
end

# show an error message and exit
function error
	echo " $sym_bad"
	echo "$argv"
	exit 1
end

# check for a setting in the config file
function check_setting
	set key $argv[1]
	set val $argv[2]
	if test (count $argv) -ge 3
		set error_msg $argv[3]
	else
		set error_msg "In $config_path set '$key $val'"
	end
	if cat $config_path | string match --regex --entire "^$key" | string match --entire --quiet $val
		check
	else
		error $error_msg
	end
end

# restart sshd
echo -n 'Restarting sshd.'
if systemctl restart sshd 2> /dev/null # suppress error messages
	check
else
	error "Try running 'apt install openssh-server' and 'systemctl enable ssh'"
end

# check sshd status
echo -n 'sshd running?'
if systemctl status ssh | string match --quiet --entire 'Active: active (running)'
	check
else
	error "Try running 'apt install openssh-server' and 'systemctl enable ssh'"
end

# check if password authentication is turned off
echo -n 'PasswordAuthentication disabled?'
check_setting PasswordAuthentication no

# check if pubkey authentication is turned on
echo -n 'PubkeyAuthentication enabled?'
check_setting PasswordAuthentication no

# check if root is allowed to log in
if string match --quiet 'root' $user
	echo -n 'PermitRootLogin set?'
	check_setting PermitRootLogin yes
end

# check if authorized_keys file path is set for user
echo -n 'AuthorizedKeysFile entry set?'
check_setting AuthorizedKeysFile $keys_path "In $config_path add $keys_path to AuthorizedKeysFile"

# check if authorized_keys file looks correct
function valid_lines
	set entries 0
	while read --line input
		if string match --quiet --regex '^\s*$' $input # line is empty
			or string match --quiet '#*' $input # line is comment
			continue
		else if string match --quiet 'ssh-rsa *' $input
			# line with public key
			set entries (math $entries + 1)
		else
			# invalid line
			exit 1
		end
	end
	if test $entries -eq 0
		echo -n ' no pubkey entries'
		exit 1
	else
		echo -n " $entries pubkey entries"
	end
end
echo -n 'authorized_keys file correct?'
if test -s $keys_path # file exists and isn't empty
	and cat $keys_path | valid_lines
	check
else
	error "Add the public key from 'ssh-keygen -y -f id_rsa' to $keys_path"
end

# check that the .ssh folder is not a symbolic link
echo -n 'No symbolic links?'
if test -L (dirname $keys_path)
	or test -L $keys_path
	error (dirname $keys_path) "and all files within must not be symbolic links"
else
	check
end

# set .ssh folder permissions
echo -n 'Setting .ssh folder permissions.'
chown -R $user:$user (dirname $keys_path)
chmod -R 700 (dirname $keys_path)
check
