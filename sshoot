#!/usr/bin/fish

# check args
function is_user
    cat /etc/passwd | string match --quiet --regex "^$_flag_value:"
end
if not argparse --max-args 1 'u/user=!is_user' 'a/ascii-only' -- $argv 2> /dev/null
    echo 'Usage: sshoot [--user username] [--ascii-only]'
    exit 2
end
if not test -n "$_flag_user"
    # if user is not given, just take the current user
    set _flag_user $USER
end

# get paths to config documents
set home (cat /etc/passwd | string match --regex --entire "^$_flag_user:" | cut --delimiter ':' --fields 6)
set authorized_keys "$home/.ssh/authorized_keys"
set sshd_config '/etc/ssh/sshd_config'

# get symbols
if test -n "$_flag_ascii_only"
    set sym_ok 'OK'
    set sym_bad 'FAIL'
else
    set sym_ok '✅'
    set sym_bad '❌'
end

# show a checkmark
function check
    echo " $sym_ok"
end

# show an error message and exit
function error
    echo " $sym_bad > $argv"
end

# check for a setting in the config file
function check_setting -a key val error_msg
    if not test -n "$error_msg"
        set error_msg "In '$sshd_config' set '$key $val'"
    end
    if cat $sshd_config | string match --regex --entire "^$key" | string match --entire --quiet $val
        check
    else
        error $error_msg
    end
end

# check sshd status
echo -n 'sshd running?'
if systemctl status ssh | string match --quiet --entire 'Active: active (running)'
    check
else
    error "Try running 'apt install openssh-server' and 'systemctl enable ssh'"
end

# check if password authentication is turned off
echo -n 'PasswordAuthentication disabled?'
check_setting PasswordAuthentication no

# check if pubkey authentication is turned on
echo -n 'PubkeyAuthentication enabled?'
check_setting PubkeyAuthentication yes

# check if root is allowed to log in
if string match --quiet 'root' $_flag_user
    echo -n 'PermitRootLogin set?'
    check_setting PermitRootLogin yes
end

# check if authorized_keys file path is set for user
echo -n 'AuthorizedKeysFile entry set?'
check_setting AuthorizedKeysFile "$authorized_keys" "In '$sshd_config' add '$authorized_keys' to AuthorizedKeysFile"

# check if authorized_keys file looks correct
function valid_lines
    set entries 0
    while read --line input
        if string match --quiet --regex '^\s*$' $input # line is empty
            or string match --quiet '#*' $input # line is comment
            continue
        else if string match --quiet 'ssh-rsa *' $input
            # line with public key
            set entries (math $entries + 1)
        else
            # invalid line
            exit 1
        end
    end
    if test $entries -eq 0
        echo -n ' no pubkey entries'
        exit 1
    else
        echo -n " $entries pubkey entries"
    end
end
echo -n 'authorized_keys file correct?'
if test -s $authorized_keys # file exists and isn't empty
    and cat $authorized_keys | valid_lines
    check
else
    error "Add the public key from 'ssh-keygen -y -f id_rsa' to $authorized_keys"
end

# check that the .ssh folder is not a symbolic link
echo -n 'No symbolic links?'
if test -L (dirname $authorized_keys)
    or test -L $authorized_keys
    error (dirname $authorized_keys) "and all files within must not be symbolic links"
else
    check
end

# check if a file/directory matches the permissions and user
function check_permissions -a file_name permissions user
    string match --quiet --regex "^.$permissions \d+ $_flag_user $flag_user" -- (ls -ld $file_name) # https://github.com/fish-shell/fish-shell/issues/4959
end

# check authorized_keys file permissions
# https://superuser.com/questions/215504/permissions-on-private-key-in-ssh-folder
echo -n 'authorized_keys permissions correct?'
if check_permissions $authorized_keys 'rw-r--r--' $_flag_user
    check
else
    error "chown $_flag_user:$_flag_user $authorized_keys; chmod 644 $authorized_keys"
end

# check .ssh directory permissions
echo -n '.ssh directory permissions correct?'
set ssh_folder (dirname $authorized_keys)
if check_permissions $ssh_folder 'rwx------' $_flag_user
    check
else
    error "chown $_flag_user:$_flag_user $ssh_folder; chmod 700 $ssh_folder"
end

echo 'If you are good to go, execute \'systemctl restart sshd\' and try to connect again.'
